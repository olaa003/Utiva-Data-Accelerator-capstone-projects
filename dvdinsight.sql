-- What is the average rental rate per movie genre (rating)?

SELECT C.NAME AS GENRE,
	RATING,
	AVG(RENTAL_RATE) AS RENTAL_RATE
FROM FILM F
JOIN FILM_CATEGORY FC ON F.FILM_ID = FC.FILM_ID
JOIN CATEGORY C ON C.CATEGORY_ID = FC.CATEGORY_ID
GROUP BY C.NAME,
	RATING
ORDER BY C.NAME ASC;

-- Identify the bottom 10 customers and their emails

SELECT C.CUSTOMER_ID, 
	EMAIL, concat(first_name, ' ', last_name) as name,
	SUM(AMOUNT) AS TOTAL
FROM PAYMENT P
JOIN CUSTOMER C ON P.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID
ORDER BY TOTAL ASC
LIMIT 10;

-- What are the most profitable movie genres (ratings)?

SELECT SUM(P.AMOUNT) AS TOTAL,
	RATING AS GENRE
FROM FILM F
JOIN INVENTORY I ON I.FILM_ID = F.FILM_ID
JOIN RENTAL R ON R.INVENTORY_ID = I.INVENTORY_ID
JOIN PAYMENT P ON P.RENTAL_ID = R.RENTAL_ID
GROUP BY F.RATING
ORDER BY TOTAL DESC;

--. How many rented movies were returned late, early, and on time?

SELECT COUNT(RENTAL_ID)
FROM FILM F
JOIN INVENTORY I ON F.FILM_ID = I.FILM_ID
JOIN RENTAL R ON R.INVENTORY_ID = I.INVENTORY_ID
WHERE (DATE(R.RETURN_DATE) - DATE(R.RENTAL_DATE)) > F.RENTAL_DURATION;

--. Which country is the most profitable for the business?

SELECT CTRY.COUNTRY,
	SUM(AMOUNT) AS MONEY
FROM PAYMENT P
JOIN CUSTOMER C ON P.CUSTOMER_ID = C.CUSTOMER_ID
JOIN STORE S ON C.STORE_ID = S.STORE_ID
JOIN ADDRESS A ON S.ADDRESS_ID = A.ADDRESS_ID
JOIN CITY CT ON A.CITY_ID = CT.CITY_ID
JOIN COUNTRY CTRY ON CTRY.COUNTRY_ID = CT.COUNTRY_ID
GROUP BY CTRY.COUNTRY
ORDER BY MONEY DESC
LIMIT 1;

-- What is the customer base in the countries where we have a presence?

SELECT CTRY.COUNTRY,
	COUNT(CUSTOMER_ID) AS NO_OF_CUSTOMERS
FROM CUSTOMER C
JOIN ADDRESS A ON C.ADDRESS_ID = A.ADDRESS_ID
JOIN CITY CT ON A.CITY_ID = CT.CITY_ID
JOIN COUNTRY CTRY ON CTRY.COUNTRY_ID = CT.COUNTRY_ID
GROUP BY CTRY.COUNTRY;


--. How many rented movies were returned late, early, and on time?

SELECT CASE 
WHEN (DATE(R.RETURN_DATE)- date(R.RENTAL_DATE)) > F.RENTAL_DURATION THEN 'returned_late'
WHEN (DATE(R.RETURN_DATE)- date(R.RENTAL_DATE)) < F.RENTAL_DURATION THEN 'returned_early' 
when (DATE(R.RETURN_DATE)- date(R.RENTAL_DATE))=F.RENTAL_DURATION then 'returned_on_time'
else 'not_returned'
end as return_status,
COUNT(*) as no_of_movies
FROM FILM F
JOIN INVENTORY I ON F.FILM_ID = I.FILM_ID
JOIN RENTAL R ON R.INVENTORY_ID = I.INVENTORY_ID
group by return_status;

